
进程是操作系统资源管理和分配的基本单位；

进程是一个动态的实体，是程序的一次执行过程。
掌握进程的概念就要将其与程序、线程两个概念区别开。
进程和程序的区别在于进进程是动态的，程序是静态的；
进程是运行行中的程序，程序是一些保存在硬盘上的可执行的代码。

线程是进程的执行流，是比进程更小的能独立运行的基本单位。
线程基本上不拥有系统资源，而进程拥有独立的内存单元，其内部的线程共享这些内存。

pid_t getpid(id)	获取进程ID
pid_t getppid(id)	获取父进程ID
pid_t getuid(id)	获取进程的实际用户ID
pid_t geteuid(id)	获取进程的有效用户ID
pid_t getgid(id)	获取进程的实际组ID
pid_t getegid(id)	获取进程的有效组ID

代码段存放程序的可执行代码：二进制机器码，且为只读的，可以被多个进程共享。
数据段存放程序的全局变量、常量、静态变量；
堆栈段的堆：存放动态分配的内存变量；
堆栈段的栈：用于函数调用，存放函数的返回地址、函数的参数、函数内部定义的局部变量。

fork:用于创建一个新的进程
exit:用于终止进程
exec:用于执行一个应用程序
wait:将父进程挂起，等待子进程终止
getpid:获取当前进程的ID
nice:改变进程的优先级

预处理、编译、汇编、链接。

内核将程序读入内存，并分配内存空间；
内核为进程分配标识符PID和其他资源；
内核保存PID和状态信息，把进程放入运行队列等待执行。

创建进程有两种方式，一是由操作系统创建，二是由父进程创建。
由操作系统创建的进程，它们之间是平等的，一般不存在资源继承关系。
而对于由父进程创建的进程(通常称为子进程)，它们和父进程存在隶属关系。
子进程又可以创建进程:，这样形成一个进程家族。子进程可以继承其父进程几乎所有的资源。
在系统启动时，操作系统会创建一些进程，它们承担着管理和分配系统资源的任务，通常被称为系统进程。

系统调用fork是创建一个新进程的唯一方法；
创建了一个一子进程之后，父进程和子进程争夺CPU，抢到CPU者执行，另外一个挂起等待。
如果想要父进程等待子进程执行完毕以后再继续执行，可以在Fork操作之后调用wait或waitpid。
一个刚刚被fork的子进程会和它的父进程一样，继续执行当前的程序。几个进程同时执行一个应用程序通常用处不大。
更常见的使用方法是子进程在被fork后可以通过调用exec函数执行其他程序。
